using System;
// Implementation of a Stack data structure
public class Stack
{
    private int[] items; // Array to hold stack elements
    private int top;     // Index representing the top of the stack
    // Constructor to initialize the stack with a specified size
    public Stack(int size)
    {
        items = new int[size]; // Initializing the array with the given size
        top = -1;              // Initializing top to -1, indicating an empty stack
    }
    // Method to check if the stack is empty
    public bool IsEmpty()
    {
        return top == -1; // Returns true if top is -1 (empty stack), otherwise false
    }
    // Method to check if the stack is full
    public bool IsFull()
    {
        return top == items.Length - 1; // Returns true if top is at the last index of the array (full stack)
    }
    // Method to push an element onto the stack
    public void Push(int item)
    {
        if (IsFull())
        {
            Console.WriteLine("Stack Full!"); // Displays a message if the stack is full
            return;
        }
        items[++top] = item; // Inserts the item at the incremented top index
    }
    // Method to pop an element from the stack
    public int Pop()
    {
        if (IsEmpty())
        {
            Console.WriteLine("Stack underflow"); // Displays a message if the stack is empty
            return -1;
        }
        return items[top--]; // Removes and returns the top element by decrementing top
    }
    // Method to peek at the top element of the stack without removing it
    public int Peek()
    {
        if (IsEmpty())
        {
            Console.WriteLine("Stack is empty"); // Displays a message if the stack is empty
            return -1;
        }
        return items[top]; // Returns the element at the top index without removing it
    }
    // Static method to display the stack elements
    public static void Display(Stack stack)
    {
        if (stack.IsEmpty())
        {
            Console.WriteLine("Stack is empty"); // Displays a message if the provided stack is empty
            return;
        }
        Console.WriteLine("\nStack elements:");
        for (int i = stack.top; i >= 0; i--)
        {
            Console.Write(stack.items[i] + " "); // Displays each element in the stack
        }
    }
}
// Main class to demonstrate the functionality of the Stack class
public class Program
{
    public static void Main(string[] args)
    {
        Console.WriteLine("Initialize a stack:");
        Stack stack = new Stack(5); // Creating a stack with a size of 5
        Console.WriteLine("Checking if stack is empty: " + stack.IsEmpty());
        Console.WriteLine("\nInput some elements onto the stack:");
        stack.Push(10);
        stack.Push(20);
        stack.Push(30);
        stack.Push(40);
        stack.Push(50);
        Stack.Display(stack); // Displaying the elements in the stack
        Console.WriteLine("\nTop element of the stack: " + stack.Peek()); // Displaying the top element without removing it
        Console.WriteLine("\nChecking if stack is full: " + stack.IsFull());
        Console.WriteLine("\nPopping three elements from the stack:");
        Console.WriteLine(stack.Pop()); // Removing and displaying the popped elements
        Console.WriteLine(stack.Pop());
        Console.WriteLine(stack.Pop());
        Stack.Display(stack); // Displaying the remaining elements in the stack
        Console.WriteLine("\nTop element of the stack: " + stack.Peek()); // Displaying the top element without removing it
    }
}
